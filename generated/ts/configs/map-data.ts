// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MapDataRow } from '../configs/map-data-row.js';


export class MapData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MapData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMapData(bb:flatbuffers.ByteBuffer, obj?:MapData):MapData {
  return (obj || new MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMapData(bb:flatbuffers.ByteBuffer, obj?:MapData):MapData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rows(index: number, obj?:MapDataRow):MapDataRow|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MapDataRow()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMapData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMapData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMapDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMapDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createMapData(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MapData.startMapData(builder);
  MapData.addRows(builder, rowsOffset);
  return MapData.endMapData(builder);
}
}
