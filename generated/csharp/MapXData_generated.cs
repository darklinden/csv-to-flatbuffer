// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Configs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapXDataRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static MapXDataRow GetRootAsMapXDataRow(ByteBuffer _bb) { return GetRootAsMapXDataRow(_bb, new MapXDataRow()); }
  public static MapXDataRow GetRootAsMapXDataRow(ByteBuffer _bb, MapXDataRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapXDataRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public Configs.Vec3? Camp1(int j) { int o = __p.__offset(8); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int Camp1Length { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Configs.Vec3? Camp2(int j) { int o = __p.__offset(10); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int Camp2Length { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Configs.MapXDataRow> CreateMapXDataRow(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset camp1Offset = default(VectorOffset),
      VectorOffset camp2Offset = default(VectorOffset)) {
    builder.StartTable(4);
    MapXDataRow.AddCamp2(builder, camp2Offset);
    MapXDataRow.AddCamp1(builder, camp1Offset);
    MapXDataRow.AddName(builder, nameOffset);
    MapXDataRow.AddId(builder, id);
    return MapXDataRow.EndMapXDataRow(builder);
  }

  public static void StartMapXDataRow(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddCamp1(FlatBufferBuilder builder, VectorOffset camp1Offset) { builder.AddOffset(2, camp1Offset.Value, 0); }
  public static void StartCamp1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddCamp2(FlatBufferBuilder builder, VectorOffset camp2Offset) { builder.AddOffset(3, camp2Offset.Value, 0); }
  public static void StartCamp2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Configs.MapXDataRow> EndMapXDataRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Configs.MapXDataRow>(o);
  }
}

public struct MapXData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static MapXData GetRootAsMapXData(ByteBuffer _bb) { return GetRootAsMapXData(_bb, new MapXData()); }
  public static MapXData GetRootAsMapXData(ByteBuffer _bb, MapXData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapXData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Configs.MapXDataRow? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (Configs.MapXDataRow?)(new Configs.MapXDataRow()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Configs.MapXData> CreateMapXData(FlatBufferBuilder builder,
      VectorOffset rowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MapXData.AddRows(builder, rowsOffset);
    return MapXData.EndMapXData(builder);
  }

  public static void StartMapXData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset rowsOffset) { builder.AddOffset(0, rowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<Configs.MapXDataRow>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<Configs.MapXDataRow>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Configs.MapXDataRow>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Configs.MapXDataRow>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Configs.MapXData> EndMapXData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Configs.MapXData>(o);
  }
  public static void FinishMapXDataBuffer(FlatBufferBuilder builder, Offset<Configs.MapXData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMapXDataBuffer(FlatBufferBuilder builder, Offset<Configs.MapXData> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
