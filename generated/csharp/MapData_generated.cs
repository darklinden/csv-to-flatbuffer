// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Configs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapDataRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static MapDataRow GetRootAsMapDataRow(ByteBuffer _bb) { return GetRootAsMapDataRow(_bb, new MapDataRow()); }
  public static MapDataRow GetRootAsMapDataRow(ByteBuffer _bb, MapDataRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapDataRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public Configs.Vec3? Hero1 { get { int o = __p.__offset(8); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Fire1 { get { int o = __p.__offset(10); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Light1 { get { int o = __p.__offset(12); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Wind1 { get { int o = __p.__offset(14); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Water1 { get { int o = __p.__offset(16); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Hero2 { get { int o = __p.__offset(18); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Fire2 { get { int o = __p.__offset(20); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Light2 { get { int o = __p.__offset(22); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Wind2 { get { int o = __p.__offset(24); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Configs.Vec3? Water2 { get { int o = __p.__offset(26); return o != 0 ? (Configs.Vec3?)(new Configs.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMapDataRow(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddHero1(FlatBufferBuilder builder, Offset<Configs.Vec3> hero1Offset) { builder.AddStruct(2, hero1Offset.Value, 0); }
  public static void AddFire1(FlatBufferBuilder builder, Offset<Configs.Vec3> fire1Offset) { builder.AddStruct(3, fire1Offset.Value, 0); }
  public static void AddLight1(FlatBufferBuilder builder, Offset<Configs.Vec3> light1Offset) { builder.AddStruct(4, light1Offset.Value, 0); }
  public static void AddWind1(FlatBufferBuilder builder, Offset<Configs.Vec3> wind1Offset) { builder.AddStruct(5, wind1Offset.Value, 0); }
  public static void AddWater1(FlatBufferBuilder builder, Offset<Configs.Vec3> water1Offset) { builder.AddStruct(6, water1Offset.Value, 0); }
  public static void AddHero2(FlatBufferBuilder builder, Offset<Configs.Vec3> hero2Offset) { builder.AddStruct(7, hero2Offset.Value, 0); }
  public static void AddFire2(FlatBufferBuilder builder, Offset<Configs.Vec3> fire2Offset) { builder.AddStruct(8, fire2Offset.Value, 0); }
  public static void AddLight2(FlatBufferBuilder builder, Offset<Configs.Vec3> light2Offset) { builder.AddStruct(9, light2Offset.Value, 0); }
  public static void AddWind2(FlatBufferBuilder builder, Offset<Configs.Vec3> wind2Offset) { builder.AddStruct(10, wind2Offset.Value, 0); }
  public static void AddWater2(FlatBufferBuilder builder, Offset<Configs.Vec3> water2Offset) { builder.AddStruct(11, water2Offset.Value, 0); }
  public static Offset<Configs.MapDataRow> EndMapDataRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Configs.MapDataRow>(o);
  }
}

public struct MapData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static MapData GetRootAsMapData(ByteBuffer _bb) { return GetRootAsMapData(_bb, new MapData()); }
  public static MapData GetRootAsMapData(ByteBuffer _bb, MapData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Configs.MapDataRow? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (Configs.MapDataRow?)(new Configs.MapDataRow()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Configs.MapData> CreateMapData(FlatBufferBuilder builder,
      VectorOffset rowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MapData.AddRows(builder, rowsOffset);
    return MapData.EndMapData(builder);
  }

  public static void StartMapData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset rowsOffset) { builder.AddOffset(0, rowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<Configs.MapDataRow>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<Configs.MapDataRow>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Configs.MapDataRow>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Configs.MapDataRow>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Configs.MapData> EndMapData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Configs.MapData>(o);
  }
  public static void FinishMapDataBuffer(FlatBufferBuilder builder, Offset<Configs.MapData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMapDataBuffer(FlatBufferBuilder builder, Offset<Configs.MapData> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
